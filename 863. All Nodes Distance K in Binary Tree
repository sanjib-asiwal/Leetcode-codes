/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
   unordered_map<int,vector<int>> map;
   vector<int> answer;
   set<int> visited;
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        // answer=vector<int> ();
        // map= unordered_map<int,vector<int>>();
        // visited=set<int>();

        buildmap(root,nullptr);
        visited.insert(target->val);
        dfs(target->val,0,k);
        return answer;
    }

    void buildmap(TreeNode* curr,TreeNode* parent){
        if(curr!=nullptr && parent!=nullptr){
            map[curr->val].push_back(parent->val);
              map[parent->val].push_back(curr->val);
              }

              if(curr->left!=nullptr)  buildmap(curr->left,curr);
                 if(curr->right!=nullptr)  buildmap(curr->right,curr);
        
    }//@codevesd

   void dfs(int cur,int distance,int k){
       if(distance==k){
           answer.push_back(cur);
           return;
       }//@codevesd
       for(int parosi : map[cur]){
           if(!visited.count(parosi)){
          visited.insert(parosi);
           dfs(parosi,distance+1,k);
           }//@codevesd
       }//@codevesd
   }//@codevesd


};//@codevesd
